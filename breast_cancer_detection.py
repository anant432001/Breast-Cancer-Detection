# -*- coding: utf-8 -*-
"""Breast Cancer Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jpL8atfSJ7F0FOd3WTt7x80YPVjx3vXd

###**Importing required Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline

"""**Reading Data**<br><br>
Attribute Information:<br>
Sample code number: id number<br>
Clump Thickness: 1 - 10<br>
Uniformity of Cell Size: 1 - 10<br>
Uniformity of Cell Shape: 1 - 10<br>
Marginal Adhesion: 1 - 10<br>
Single Epithelial Cell Size: 1 - 10<br>
Bare Nuclei: 1 - 10<br>
Bland Chromatin: 1 - 10<br>
Normal Nucleoli: 1 - 10<br>
Mitoses: 1 - 10<br>
Class: (2 for benign, 4 for malignant)<br>
Malignant==> Cancerous<br>
Benign==> Not Cancerous (Healthy)<br><br>
Background:<br>
All of our bodies are composed of cells. The human body has about 100 trillion cells within it. And usually those cells behave in a certain way. However, occasionally, one of these 100 trillion cells, behave in a different way and keeps dividing and pushes the other cells around it out of the way. That cell stops observing the rules of the tissue within which it is located and begins to move out of its normal position and starts invading into the tissues around it and sometimes entering the bloodstream and becoming is called a metastasis.
In summary, as we grow older,throughout a lifetime, we go through this knid of situation where a particular kind of gene is mutated where the protein that it makes is abnormal and drives the cell to behave in a different way that we call cancer.
This is what Dr. WIlliam H. Wolberg was observing and put together this dataset.
"""

df = pd.read_csv('breastCancer.csv')

df.head() #Displaying initial few rows of data

df.shape

"""Dataset contains 699 rows of data and 11 columns or features of data.

---

##**Data Preprocessing**
"""

df['class'].value_counts() #Target features

"""2 -> Benign (No Cancer)<br>
4 -> Malignant (Cancer)
"""

df.dtypes

"""Feature "bare_nucleoli" seems to have numerical data, but some of the data can be non digit. So we need to clean our data."""

print(df['bare_nucleoli'])

df[df['bare_nucleoli']== '?']

df[df['bare_nucleoli']== '?'].sum()

list1 = []
c = 0
for i in df['bare_nucleoli']:
  try:
    list1.append(int(i))
  except:
    list1.append(np.nan)
    c+=1

print('''No. of datapoints in the column 'bare_nucleoli' with non digit values = ''', c)

df['bare_nucleoli'] = list1

df.head()

df.dtypes

"""All the datatypes are converted into numerical data, we can use the data to make predictions"""

df.describe()

df.median()

df = df.fillna(value = df.median())

df['bare_nucleoli'] = df['bare_nucleoli'].astype('int64')

df.dtypes

"""---

##**Exploratory Data Analysis**

Dropping the id feature as it is, having no relation with our target feature.
"""

df.drop(labels = 'id', axis = 1, inplace = True)

df.columns

df.describe().T

"""**Bivariate Data Analysis**"""

sns.distplot(df['class'])

plt.show()

"""2 -> Benign
4 -> Malignant

**Multivariate Data Analysis**
"""

df.hist(bins=20, figsize=(30,30), layout=(6, 3))

plt.show()

"""**BoxPlot**"""

plt.figure(figsize=(16,9))
sns.boxplot(data = df, orient = 'h')
plt.show()

"""**Correlation**"""

df.corr()

"""**Correlation Heatmap**"""

plt.figure(figsize=(16,9))

sns.heatmap(data = df.corr(), annot = True, linewidths = 2)
plt.title('Correlation between different features', fontsize = 20)
plt.show()

"""**PairPlot**"""

sns.pairplot(data = df, diag_kind = 'kde')
plt.show()

"""---

##**Building Model**
"""

X_data = df.drop('class', axis = 1)
y_data = df['class']

"""#####Splitting Data into train and test sets"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size = 0.3, random_state = 1)

"""**Model - 1 : KNN Algorithm (K-Nearest Neighbour)**

"""

from sklearn.neighbors import KNeighborsClassifier

KNN = KNeighborsClassifier(n_neighbors = 5, weights = 'distance')

KNN.fit(X_train, y_train)

KNN_pred = KNN.predict(X_test)
KNN_pred

print('KNeighborsClassifier Algorithm is predicting at {0:.4g}%'.format(KNN.score(X_test, y_test)*100))

"""**Model - 2 : SVM Algorithm (Support Vector Machine)**"""

from sklearn.svm import SVC

SVM = SVC(gamma = 0.025, C = 3)

SVM.fit(X_train, y_train)

SVM_pred = SVM.predict(X_test)
SVM_pred

print('SVM Algorithm is predicting at {0:.4g}%'.format(SVM.score(X_test, y_test)*100))

pred_df = pd.concat([pd.DataFrame(KNN_pred), pd.DataFrame(SVM_pred)], axis = 1)
pred_df.columns = ['KNN', 'SVM']
pred_df

print(pred_df['KNN'].value_counts(), '\n')
print(pred_df['SVM'].value_counts())

"""---
##**Classification Report**
"""

from sklearn.metrics import classification_report

print('Classification Report for KNN Algorithm\n\n', classification_report(y_test, KNN_pred))

print('Classification Report for SVM Algorithm\n\n', classification_report(y_test, SVM_pred))

"""Classification report **Confusion Matrix**"""

from sklearn import metrics

cm_KNN = metrics.confusion_matrix(y_test, KNN_pred, labels = [2, 4])
cm_SVM = metrics.confusion_matrix(y_test, SVM_pred, labels = [2, 4])

df_cm_KNN = pd.DataFrame(cm_KNN, index = [i for i in [2,4]], columns = [i for i in ["Predict M","Predict B"]])
df_cm_SVM = pd.DataFrame(cm_SVM, index = [i for i in [2,4]], columns = [i for i in ["Predict M","Predict B"]])

plt.figure(figsize = (18,5))

plt.subplot(1,2,1)
sns.heatmap(df_cm_KNN, annot = True, linewidths= 2)
plt.title('Confusion Matrix for KNN Algo', fontsize = 15)

plt.subplot(1,2,2)
sns.heatmap(df_cm_SVM, annot = True, linewidths= 2)
plt.title('Confusion Matrix for SVM Algo', fontsize = 15)

plt.show()

